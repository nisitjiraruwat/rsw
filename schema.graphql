# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
}

type Resume {
  id: ID!
  email: String
  phone: String
  address: String
  educations(
    where: EducationWhereInput! = {}
    orderBy: [EducationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Education!]
  educationsCount(where: EducationWhereInput! = {}): Int
  additionalSkills: JSON
  experiences(
    where: ExperienceWhereInput! = {}
    orderBy: [ExperienceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Experience!]
  experiencesCount(where: ExperienceWhereInput! = {}): Int
}

input ResumeWhereUniqueInput {
  id: ID
  email: String
}

input ResumeWhereInput {
  AND: [ResumeWhereInput!]
  OR: [ResumeWhereInput!]
  NOT: [ResumeWhereInput!]
  id: IDFilter
  email: StringFilter
  phone: StringFilter
  address: StringFilter
  educations: EducationManyRelationFilter
  experiences: ExperienceManyRelationFilter
}

input EducationManyRelationFilter {
  every: EducationWhereInput
  some: EducationWhereInput
  none: EducationWhereInput
}

input ExperienceManyRelationFilter {
  every: ExperienceWhereInput
  some: ExperienceWhereInput
  none: ExperienceWhereInput
}

input ResumeOrderByInput {
  id: OrderDirection
  email: OrderDirection
  phone: OrderDirection
  address: OrderDirection
}

input ResumeUpdateInput {
  email: String
  phone: String
  address: String
  educations: EducationRelateToManyForUpdateInput
  additionalSkills: JSON
  experiences: ExperienceRelateToManyForUpdateInput
}

input EducationRelateToManyForUpdateInput {
  disconnect: [EducationWhereUniqueInput!]
  set: [EducationWhereUniqueInput!]
  create: [EducationCreateInput!]
  connect: [EducationWhereUniqueInput!]
}

input ExperienceRelateToManyForUpdateInput {
  disconnect: [ExperienceWhereUniqueInput!]
  set: [ExperienceWhereUniqueInput!]
  create: [ExperienceCreateInput!]
  connect: [ExperienceWhereUniqueInput!]
}

input ResumeUpdateArgs {
  where: ResumeWhereUniqueInput!
  data: ResumeUpdateInput!
}

input ResumeCreateInput {
  email: String
  phone: String
  address: String
  educations: EducationRelateToManyForCreateInput
  additionalSkills: JSON
  experiences: ExperienceRelateToManyForCreateInput
}

input EducationRelateToManyForCreateInput {
  create: [EducationCreateInput!]
  connect: [EducationWhereUniqueInput!]
}

input ExperienceRelateToManyForCreateInput {
  create: [ExperienceCreateInput!]
  connect: [ExperienceWhereUniqueInput!]
}

type Education {
  id: ID!
  resume: Resume
  name: String
  level: String
  graduation: String
}

input EducationWhereUniqueInput {
  id: ID
}

input EducationWhereInput {
  AND: [EducationWhereInput!]
  OR: [EducationWhereInput!]
  NOT: [EducationWhereInput!]
  id: IDFilter
  resume: ResumeWhereInput
  name: StringFilter
  level: StringFilter
  graduation: StringFilter
}

input EducationOrderByInput {
  id: OrderDirection
  name: OrderDirection
  level: OrderDirection
  graduation: OrderDirection
}

input EducationUpdateInput {
  resume: ResumeRelateToOneForUpdateInput
  name: String
  level: String
  graduation: String
}

input ResumeRelateToOneForUpdateInput {
  create: ResumeCreateInput
  connect: ResumeWhereUniqueInput
  disconnect: Boolean
}

input EducationUpdateArgs {
  where: EducationWhereUniqueInput!
  data: EducationUpdateInput!
}

input EducationCreateInput {
  resume: ResumeRelateToOneForCreateInput
  name: String
  level: String
  graduation: String
}

input ResumeRelateToOneForCreateInput {
  create: ResumeCreateInput
  connect: ResumeWhereUniqueInput
}

type Experience {
  id: ID!
  resume: Resume
  position: String
  company: String
  address: String
  fromDate: DateTime
  toDate: DateTime
  works: JSON
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input ExperienceWhereUniqueInput {
  id: ID
}

input ExperienceWhereInput {
  AND: [ExperienceWhereInput!]
  OR: [ExperienceWhereInput!]
  NOT: [ExperienceWhereInput!]
  id: IDFilter
  resume: ResumeWhereInput
  position: StringFilter
  company: StringFilter
  address: StringFilter
  fromDate: DateTimeNullableFilter
  toDate: DateTimeNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input ExperienceOrderByInput {
  id: OrderDirection
  position: OrderDirection
  company: OrderDirection
  address: OrderDirection
  fromDate: OrderDirection
  toDate: OrderDirection
}

input ExperienceUpdateInput {
  resume: ResumeRelateToOneForUpdateInput
  position: String
  company: String
  address: String
  fromDate: DateTime
  toDate: DateTime
  works: JSON
}

input ExperienceUpdateArgs {
  where: ExperienceWhereUniqueInput!
  data: ExperienceUpdateInput!
}

input ExperienceCreateInput {
  resume: ResumeRelateToOneForCreateInput
  position: String
  company: String
  address: String
  fromDate: DateTime
  toDate: DateTime
  works: JSON
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createResume(data: ResumeCreateInput!): Resume
  createResumes(data: [ResumeCreateInput!]!): [Resume]
  updateResume(where: ResumeWhereUniqueInput!, data: ResumeUpdateInput!): Resume
  updateResumes(data: [ResumeUpdateArgs!]!): [Resume]
  deleteResume(where: ResumeWhereUniqueInput!): Resume
  deleteResumes(where: [ResumeWhereUniqueInput!]!): [Resume]
  createEducation(data: EducationCreateInput!): Education
  createEducations(data: [EducationCreateInput!]!): [Education]
  updateEducation(
    where: EducationWhereUniqueInput!
    data: EducationUpdateInput!
  ): Education
  updateEducations(data: [EducationUpdateArgs!]!): [Education]
  deleteEducation(where: EducationWhereUniqueInput!): Education
  deleteEducations(where: [EducationWhereUniqueInput!]!): [Education]
  createExperience(data: ExperienceCreateInput!): Experience
  createExperiences(data: [ExperienceCreateInput!]!): [Experience]
  updateExperience(
    where: ExperienceWhereUniqueInput!
    data: ExperienceUpdateInput!
  ): Experience
  updateExperiences(data: [ExperienceUpdateArgs!]!): [Experience]
  deleteExperience(where: ExperienceWhereUniqueInput!): Experience
  deleteExperiences(where: [ExperienceWhereUniqueInput!]!): [Experience]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  resumes(
    where: ResumeWhereInput! = {}
    orderBy: [ResumeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Resume!]
  resume(where: ResumeWhereUniqueInput!): Resume
  resumesCount(where: ResumeWhereInput! = {}): Int
  educations(
    where: EducationWhereInput! = {}
    orderBy: [EducationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Education!]
  education(where: EducationWhereUniqueInput!): Education
  educationsCount(where: EducationWhereInput! = {}): Int
  experiences(
    where: ExperienceWhereInput! = {}
    orderBy: [ExperienceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Experience!]
  experience(where: ExperienceWhereUniqueInput!): Experience
  experiencesCount(where: ExperienceWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
